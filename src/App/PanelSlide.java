/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package App;


import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import javax.swing.Timer;
/**
 *
 * @author Asus
 */
public class PanelSlide extends javax.swing.JPanel {
    //attributes
    private final Timer timer;
    private Component comExit;
    private Component comShow;
    private AnimateType animateType;
    private int animate = 30; //animate speed
    
    //setters and getters for animate
    public int getAnimate() {
        return animate;
    }
    public void setAnimate(int animate) {
        this.animate = animate;
    }

    public PanelSlide() {
        initComponents();
        setLayout(null);
        addComponentListener(new ComponentAdapter() {
            @Override
            public void componentResized(ComponentEvent ce) {
                //adjust the size of the displayed component when the panel is resized
                comShow.setSize(getSize());
            }
        });
        //initialize the timer for the animation
        timer = new Timer(0, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                //animate or move on each timer tick
                animate();
            }
        });
    }

    //show component with sliding animation
    public void show(Component com, AnimateType animateType) {
        // Check if the timer is not already running
        if (!timer.isRunning()) {
            this.animateType = animateType;
            this.comShow = com;
            com.setSize(getSize()); // Set the size of the new component

            // If there are no components currently in the panel
            if (getComponentCount() == 0) {
                add(com); // Add the new component to the panel
                comExit = com; // Set comExit to the new component
                repaint();
                revalidate();
            } else {
                // Set the initial location of the new component for the animation
                if (animateType == AnimateType.TO_RIGHT) {
                    comShow.setLocation(-comShow.getWidth(), 0); // Start from the left
                } else {
                    comShow.setLocation(getWidth(), 0); // Start from the right
                }

                add(com); // Add the new component to the panel
                repaint();
                revalidate();
                timer.start(); // Start the animation timer
            }
        }
    }

    private void animate() {
        //animate from left to right
        if (animateType == AnimateType.TO_RIGHT) {
            if (comShow.getLocation().x < 0) {
                //move the new and existing component to the right
                comShow.setLocation(comShow.getLocation().x + animate, 0);
                comExit.setLocation(comExit.getLocation().x + animate, 0);
            } else {
                // Stop animate
                comShow.setLocation(0, 0);
                timer.stop();
                remove(comExit);
                comExit = comShow;
            }
        //animate from left to right
        } else {
            if (comShow.getLocation().x > 0) {
                //move the new and existing component to the left
                comShow.setLocation(comShow.getLocation().x - animate, 0);
                comExit.setLocation(comExit.getLocation().x - animate, 0);
            } else {
                //stop animate
                comShow.setLocation(0, 0);
                timer.stop();
                remove(comExit);
                comExit = comShow;
            }
        }
    }                      

    //enum for the animation type (to left or to right)
    public static enum AnimateType {
        TO_RIGHT, TO_LEFT
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
